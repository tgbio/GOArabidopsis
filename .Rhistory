library('GOFunction')
library('org.At.tair.db')
#retrieve mapping between TAIR ID and Entrez Gene identifiers
all.at.genes <- org.At.tairENTREZID
#converts mapped ids to a list
mapped.at.genes <- mappedkeys(all.at.genes)
qtl_at_ids = list("AT_ids_between_F4I1_and_MSAT2.22.csv", "AT_ids_between_GH.473C_and_HH.480C.csv", "AT_ids_between_PVV4_and_HH.335C.csv")#MODIFY HERE
ont_type = list("MF", "BP", "CC")
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
q
q
q
ont_type = list("MF", "BP", "CC")
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
qtl_genes = read.csv(q,header=F)$V1 # read AT IDs of protein coding genes within QTL region into a vector
for (o in ont_type) { # for each type of ontology
print(o)
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(o)
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(region_fragment)
outfilename = paste(region_fragment, "_GO_", o, sep = "") # generate a unique filename for the GO output
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
qtl_genes = read.csv(q,header=F)$V1 # read AT IDs of protein coding genes within QTL region into a vector
for (o in ont_type) { # for each type of ontology
print(o)
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(region_fragment)
outfilename = paste(region_fragment, "_GO_", o, sep = "") # generate a unique filename for the GO output
print(outfilename)
num_gen = length(qtl_genes) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(qtl_genes, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
if(length(sigTerm) > 0){
print(sigTerm)
library('GOFunction')
library('org.At.tair.db')
library('GOFunction')
library('org.At.tair.db')
fkhs'lkdfg'
library('GOFunction')
library('org.At.tair.db')
#retrieve mapping between TAIR ID and Entrez Gene identifiers
all.at.genes <- org.At.tairENTREZID
#converts mapped ids to a list
mapped.at.genes <- mappedkeys(all.at.genes)
library('GOFunction')
library('org.At.tair.db')
#retrieve mapping between TAIR ID and Entrez Gene identifiers
all.at.genes <- org.At.tairENTREZID
str(all.at.genes)
?
?mappedkeys
setwd("C:/Users/Alex/Desktop/Work/Research/Lettuce/GitHub/GOFunction/GOArabidopsis")
mapped.at.genes <- mappedkeys(all.at.genes)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
qtl_at_ids = list("AT_ids_test.csv")#MODIFY HERE
?substr
?regexpr
q = 'AT_ids_between_AT_ids_test.csv'
regexpr("csv", q, fixed=T)[1]-2
regexpr("csv", q, fixed=T)[1]
regexpr("csv", q, fixed=T)
?GOFunction
library('GOFunction')
library('org.At.tair.db')
#retrieve mapping between TAIR ID and Entrez Gene identifiers
all.at.genes <- org.At.tairENTREZID
#converts mapped ids to a list
mapped.at.genes <- mappedkeys(all.at.genes)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
qtl_at_ids = list("AT_ids_between_AT_ids_test.csv")#MODIFY HERE
ont_type = list("MF", "BP", "CC")
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
qtl_genes = read.csv(q,header=F)$V1 # read AT IDs of protein coding genes within QTL region into a vector
for (o in ont_type) { # for each type of ontology
print(o)
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(region_fragment)
outfilename = paste(region_fragment, "_GO_", o, sep = "") # generate a unique filename for the GO output
print(outfilename)
num_gen = length(qtl_genes) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(qtl_genes, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
if(length(sigTerm) > 0){
print(sigTerm)
#adapted from the org.At.tair.db vignette for org.At.tairGO2ALLTAIRS
# provides mappings between a given GO identifier and all TAIR identifiers annotated at that GO term or one of its children in the GO ontology
#xx is a list with names = GO ids, values = a named list with values of AT ids and names of evidence codes
##csv.out = paste(outfilename, "_GO_signif_ATIDs.csv", sep = "")
##print(csv.out)
##xx <- as.list(org.At.tairGO2ALLTAIRS)
##for (i in 1:nrow(sigTerm)){
### Gets the tair identifiers for the significant GO term
##sindex = grep(as.character(sigTerm[[i,1]]), names(xx), fixed=TRUE, value = FALSE)
##goid <- xx[sindex]
##stopifnot(length(goid)==1)
### Gets all the tair identifiers for significant GO term
##at_id_char = as.character(goid[[1]])
##at_id_list = as.list(at_id_char)
### Select just those tair identifiers also in qtl_genes
##gene_list = at_id_list[at_id_list %in% qtl_genes]
##out_df = c(as.character(sigTerm[[i,1]]), gene_list)
##print(str(out_df))
##write.table(out_df, csv.out, append=TRUE,col.names=FALSE, row.names=FALSE, sep=",")
}}
}
}
library('GOFunction')
library('org.At.tair.db')
#retrieve mapping between TAIR ID and Entrez Gene identifiers
all.at.genes <- org.At.tairENTREZID
#converts mapped ids to a list
mapped.at.genes <- mappedkeys(all.at.genes)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
qtl_at_ids = list("AT_ids_between_AT_ids_test.csv")#MODIFY HERE
ont_type = list("MF", "BP", "CC")
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
qtl_genes = read.csv(q,header=F)$V1 # read AT IDs of protein coding genes within QTL region into a vector
for (o in ont_type) { # for each type of ontology
print(o)
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(region_fragment)
outfilename = paste(region_fragment, "_GO_", o, sep = "") # generate a unique filename for the GO output
print(outfilename)
num_gen = length(qtl_genes) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(qtl_genes, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
#adapted from the org.At.tair.db vignette for org.At.tairGO2ALLTAIRS
# provides mappings between a given GO identifier and all TAIR identifiers annotated at that GO term or one of its children in the GO ontology
#xx is a list with names = GO ids, values = a named list with values of AT ids and names of evidence codes
##csv.out = paste(outfilename, "_GO_signif_ATIDs.csv", sep = "")
##print(csv.out)
##xx <- as.list(org.At.tairGO2ALLTAIRS)
##for (i in 1:nrow(sigTerm)){
### Gets the tair identifiers for the significant GO term
##sindex = grep(as.character(sigTerm[[i,1]]), names(xx), fixed=TRUE, value = FALSE)
##goid <- xx[sindex]
##stopifnot(length(goid)==1)
### Gets all the tair identifiers for significant GO term
##at_id_char = as.character(goid[[1]])
##at_id_list = as.list(at_id_char)
### Select just those tair identifiers also in qtl_genes
##gene_list = at_id_list[at_id_list %in% qtl_genes]
##out_df = c(as.character(sigTerm[[i,1]]), gene_list)
##print(str(out_df))
##write.table(out_df, csv.out, append=TRUE,col.names=FALSE, row.names=FALSE, sep=",")
}}
}
}
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
blastfile = "C:\Users\Alex\Desktop\Work\Research\Lettuce\GitHub\Finding-EST-Sequences\CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
blastfile = "C:\Users\Alex\Desktop\Work\Research\Lettuce\GitHub\Finding-EST-Sequences\CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastfile = "CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
str(blastrecord)
species = blastrecord$V18
species
atonly = blastrecord[species=="Arabidopsis thaliana", ]
print(atonly)
str(atonly)
atonlygeneIDs = atonly$V13
str(atonlygeneIDs)
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
qtl_at_ids = list(atonlygeneIDs)#MODIFY HERE
ont_type = list("MF", "BP", "CC")
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
qtl_genes = read.csv(q,header=F)$V1 # read AT IDs of protein coding genes within QTL region into a vector
for (o in ont_type) { # for each type of ontology
print(o)
print(region_fragment)
outfilename = paste(region_fragment, "_GO_", o, sep = "") # generate a unique filename for the GO output
num_gen = length(qtl_genes) # count the number of genes in QTL region
print("Number of Genes:")
print(outfilename)
print(num_gen)
sigTerm = GOFunction(qtl_genes, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
# provides mappings between a given GO identifier and all TAIR identifiers annotated at that GO term or one of its children in the GO ontology
#xx is a list with names = GO ids, values = a named list with values of AT ids and names of evidence codes
##print(csv.out)
### Gets the tair identifiers for the significant GO term
##goid <- xx[sindex]
### Gets all the tair identifiers for significant GO term
##gene_list = at_id_list[at_id_list %in% qtl_genes]
### Select just those tair identifiers also in qtl_genes
##at_id_char = as.character(goid[[1]])
##for (i in 1:nrow(sigTerm)){
##stopifnot(length(goid)==1)
##xx <- as.list(org.At.tairGO2ALLTAIRS)
##at_id_list = as.list(at_id_char)
#adapted from the org.At.tair.db vignette for org.At.tairGO2ALLTAIRS
##csv.out = paste(outfilename, "_GO_signif_ATIDs.csv", sep = "")
##sindex = grep(as.character(sigTerm[[i,1]]), names(xx), fixed=TRUE, value = FALSE)
##out_df = c(as.character(sigTerm[[i,1]]), gene_list)
##print(str(out_df))
}}
}
}
##write.table(out_df, csv.out, append=TRUE,col.names=FALSE, row.names=FALSE, sep=",")
blastfile = "CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
species = blastrecord$V18
atonly = blastrecord[species=="Arabidopsis thaliana", ]
atonlygeneIDs = atonly$V13
#retrieve mapping between TAIR ID and Entrez Gene identifiers then converts mapped ids to a list
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
qtl_at_ids = list(atonlygeneIDs)#MODIFY HERE
ont_type = list("MF", "BP", "CC")
for (q in qtl_at_ids) { # loop over each csv filename in list qtl_at_ids
qtl_genes = read.csv(q,header=F)$V1 # read AT IDs of protein coding genes within QTL region into a vector
for (o in ont_type) { # for each type of ontology
print(o)
region_fragment = substr(q, 16, regexpr("csv", q, fixed=T)[1]-2) # return the region name from the csv filename
print(region_fragment)
outfilename = paste(region_fragment, "_GO_", o, sep = "") # generate a unique filename for the GO output
print(outfilename)
num_gen = length(qtl_genes) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(qtl_genes, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
atonlygeneIDs = as.character(atonly$V13)
str(atonlygeneIDs)
sdgdfg
sdgfsdfgsdfgsdfg
atonlygeneIDs = as.character(atonly$V13)
str(atonlygeneIDs)
blastfile = "CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
species = blastrecord$V18
atonly = blastrecord[species=="Arabidopsis thaliana", ]
atonlygeneIDs = as.character(atonly$V13)
#retrieve mapping between TAIR ID and Entrez Gene identifiers then converts mapped ids to a list
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
ont_type = list("MF", "BP", "CC")
for (o in ont_type) { # for each type of ontology
print(o)
outfilename = "QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI_Athaliana" # generate a unique filename for the GO output
print(outfilename)
num_gen = length(atonlygeneIDs) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(atonlygeneIDs, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
library('GOFunction')
library('org.At.tair.db')
blastfile = "CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
species = blastrecord$V18
atonly = blastrecord[species=="Arabidopsis thaliana", ]
atonlygeneIDs = as.character(atonly$V13)
#retrieve mapping between TAIR ID and Entrez Gene identifiers then converts mapped ids to a list
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
ont_type = list("MF", "BP", "CC")
for (o in ont_type) { # for each type of ontology
print(o)
outfilename = "QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI_Athaliana" # generate a unique filename for the GO output
print(outfilename)
num_gen = length(atonlygeneIDs) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(atonlygeneIDs, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
}
}
#adapted from the org.At.tair.db vignette for org.At.tairGO2ALLTAIRS
# provides mappings between a given GO identifier and all TAIR identifiers annotated at that GO term or one of its children in the GO ontology
#xx is a list with names = GO ids, values = a named list with values of AT ids and names of evidence codes
##csv.out = paste(outfilename, "_GO_signif_ATIDs.csv", sep = "")
##print(csv.out)
##xx <- as.list(org.At.tairGO2ALLTAIRS)
##for (i in 1:nrow(sigTerm)){
### Gets the tair identifiers for the significant GO term
##sindex = grep(as.character(sigTerm[[i,1]]), names(xx), fixed=TRUE, value = FALSE)
##goid <- xx[sindex]
##stopifnot(length(goid)==1)
### Gets all the tair identifiers for significant GO term
##at_id_char = as.character(goid[[1]])
##at_id_list = as.list(at_id_char)
### Select just those tair identifiers also in qtl_genes
##gene_list = at_id_list[at_id_list %in% qtl_genes]
##out_df = c(as.character(sigTerm[[i,1]]), gene_list)
##print(str(out_df))
##write.table(out_df, csv.out, append=TRUE,col.names=FALSE, row.names=FALSE, sep=",")
library('GOFunction')
library('org.At.tair.db')
blastfile = "CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
species = blastrecord$V18
atonly = blastrecord[species=="Arabidopsis thaliana", ]
atonlygeneIDs = as.character(atonly$V13)
#retrieve mapping between TAIR ID and Entrez Gene identifiers then converts mapped ids to a list
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
ont_type = list("MF", "BP", "CC")
for (o in ont_type) { # for each type of ontology
print(o)
outfilename = "QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI_Athaliana" # generate a unique filename for the GO output
print(outfilename)
num_gen = length(atonlygeneIDs) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(atonlygeneIDs, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
}
}
#adapted from the org.At.tair.db vignette for org.At.tairGO2ALLTAIRS
# provides mappings between a given GO identifier and all TAIR identifiers annotated at that GO term or one of its children in the GO ontology
#xx is a list with names = GO ids, values = a named list with values of AT ids and names of evidence codes
##csv.out = paste(outfilename, "_GO_signif_ATIDs.csv", sep = "")
##print(csv.out)
##xx <- as.list(org.At.tairGO2ALLTAIRS)
##for (i in 1:nrow(sigTerm)){
### Gets the tair identifiers for the significant GO term
##sindex = grep(as.character(sigTerm[[i,1]]), names(xx), fixed=TRUE, value = FALSE)
##goid <- xx[sindex]
##stopifnot(length(goid)==1)
### Gets all the tair identifiers for significant GO term
##at_id_char = as.character(goid[[1]])
##at_id_list = as.list(at_id_char)
### Select just those tair identifiers also in qtl_genes
##gene_list = at_id_list[at_id_list %in% qtl_genes]
##out_df = c(as.character(sigTerm[[i,1]]), gene_list)
##print(str(out_df))
##write.table(out_df, csv.out, append=TRUE,col.names=FALSE, row.names=FALSE, sep=",")
library('GOFunction')
library('org.At.tair.db')
blastfile = "CORRECTEDTESTLOCALBLAST_QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI.csv"
blastrecord = read.csv(blastfile, header=F)
species = blastrecord$V18
atonly = blastrecord[species=="Arabidopsis thaliana", ]
atonlygeneIDs = as.character(atonly$V13)
#retrieve mapping between TAIR ID and Entrez Gene identifiers then converts mapped ids to a list
mapped.at.genes <- mappedkeys(org.At.tairENTREZID)
#qtl_at_ids = list("AT_ids_between_CH.215L_and_HH.360L.csv", "AT_ids_between_DF.408C_and_FD.90L.csv")
ont_type = list("MF", "BP", "CC")
for (o in ont_type) { # for each type of ontology
print(o)
outfilename = "QGG24G02.yg.ab1_CLS_S3_Contig10858_LettuceNCBI_Athaliana" # generate a unique filename for the GO output
print(outfilename)
num_gen = length(atonlygeneIDs) # count the number of genes in QTL region
print("Number of Genes:")
print(num_gen)
sigTerm = GOFunction(atonlygeneIDs, mapped.at.genes, organism="org.At.tair.db", ontology=o, fdrmethod="BY", fdrth=0.05, ppth=0.05, pcth=0.05, poth=0.05, peth=0.05, bmpSize=2000, filename=outfilename) # find GO terms enriched in region
print(sigTerm)
if(length(sigTerm) > 0){
print(sigTerm)
}
}
#adapted from the org.At.tair.db vignette for org.At.tairGO2ALLTAIRS
# provides mappings between a given GO identifier and all TAIR identifiers annotated at that GO term or one of its children in the GO ontology
#xx is a list with names = GO ids, values = a named list with values of AT ids and names of evidence codes
##csv.out = paste(outfilename, "_GO_signif_ATIDs.csv", sep = "")
##print(csv.out)
##xx <- as.list(org.At.tairGO2ALLTAIRS)
##for (i in 1:nrow(sigTerm)){
### Gets the tair identifiers for the significant GO term
##sindex = grep(as.character(sigTerm[[i,1]]), names(xx), fixed=TRUE, value = FALSE)
##goid <- xx[sindex]
##stopifnot(length(goid)==1)
### Gets all the tair identifiers for significant GO term
##at_id_char = as.character(goid[[1]])
##at_id_list = as.list(at_id_char)
### Select just those tair identifiers also in qtl_genes
##gene_list = at_id_list[at_id_list %in% qtl_genes]
##out_df = c(as.character(sigTerm[[i,1]]), gene_list)
##print(str(out_df))
##write.table(out_df, csv.out, append=TRUE,col.names=FALSE, row.names=FALSE, sep=",")
